import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from groq import Groq

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GROQ_API_KEY   = os.getenv("GROQ_API_KEY")
GROQ_MODEL     = "llama-3.1-8b-instant"

if not TELEGRAM_TOKEN or not GROQ_API_KEY:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ñ TELEGRAM_TOKEN/GROQ_API_KEY —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")

client = Groq(api_key=GROQ_API_KEY)
# === –ø—Ä–æ—Å—Ç–µ –º–µ–Ω—é ===
KBD = ReplyKeyboardMarkup(
    [
        [KeyboardButton("–°—Ç—É–¥–µ–Ω—Ç"), KeyboardButton("IT-—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó")],
        [KeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç–∏"), KeyboardButton("Prompt ChatGPT")],
    ],
    resize_keyboard=True,
)

STUDENT = "–ü—Ä—ñ–∑–≤–∏—â–µ: –®–º–∞—Ç–∫–æ\n–ì—Ä—É–ø–∞: –Ü–û-22"
IT = ("‚Ä¢ –®–Ü —Ç–∞ ML\n"
      "‚Ä¢ –•–º–∞—Ä–∏ (AWS, GCP, Azure)\n"
      "‚Ä¢ Docker / Kubernetes\n"
      "‚Ä¢ Django / FastAPI / React\n"
      "‚Ä¢ PostgreSQL / MongoDB / Redis\n"
      "‚Ä¢ DevOps, CI/CD")
CONTACTS = "–¢–µ–ª.: +380066767875\nE-mail: smatkoden@gmail.com"
HINT = ("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –∑–∞–ø–∏—Ç (prompt) ")

def ask_groq(prompt: str) -> str:
    resp = client.chat.completions.create(
        model=GROQ_MODEL,
        messages=[
            {"role": "system", "content": "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Å—Ç–∏—Å–ª–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –ø–æ —Å—É—Ç—ñ."},
            {"role": "user", "content": prompt},
        ],
        temperature=0.5,
        max_tokens=700,
    )
    return (resp.choices[0].message.content or "").strip()

# === —Ö–µ–Ω–¥–ª–µ—Ä–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª üëá", reply_markup=KBD)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start —ñ –∫–æ—Ä–∏—Å—Ç—É–π—Ç–µ—Å—å –º–µ–Ω—é üôÇ", reply_markup=KBD)

async def handle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()

    if text.lower() == "—Å—Ç—É–¥–µ–Ω—Ç":
        await update.message.reply_text(STUDENT, reply_markup=KBD)
    elif text.lower() == "it-—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó":
        await update.message.reply_text(IT, reply_markup=KBD)
    elif text.lower() == "–∫–æ–Ω—Ç–∞–∫—Ç–∏":
        await update.message.reply_text(CONTACTS, reply_markup=KBD)
    elif text.lower() == "prompt chatgpt":
        context.user_data["gpt"] = True
        await update.message.reply_text(HINT, reply_markup=KBD)
    else:
        # —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ —Ä–µ–∂–∏–º GPT ‚Äî —à–ª–µ–º–æ –∑–∞–ø–∏—Ç —É Groq
        if context.user_data.get("gpt"):
            await update.message.reply_chat_action("typing")
            try:
                answer = ask_groq(text)
                context.user_data["gpt"] = False
                await update.message.reply_text(answer, reply_markup=KBD)
            except Exception as e:
                context.user_data["gpt"] = False
                await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {e}", reply_markup=KBD)
        else:
            await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é ‚§µÔ∏è", reply_markup=KBD)

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle))
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()